//
// This file was generated by resx2sr tool
//

namespace System
{
	partial class SR
	{
		public const string DebugAssertBanner = "---- DEBUG ASSERTION FAILED ----";
		public const string DebugAssertLongMessage = "---- Assert Long Message ----";
		public const string DebugAssertShortMessage = "---- Assert Short Message ----";
		public const string IO_FileNotFound = "Unable to find the specified file.";
		public const string IO_FileNotFound_FileName = "Could not find file '{0}'.";
		public const string IO_PathNotFound_NoPathName = "Could not find a part of the path.";
		public const string IO_PathNotFound_Path = "Could not find a part of the path '{0}'.";
		public const string IO_SharingViolation_File = "The process cannot access the file '{0}' because it is being used by another process.";
		public const string IO_SharingViolation_NoFileName = "The process cannot access the file because it is being used by another process.";
		public const string UnauthorizedAccess_IODenied_NoPathName = "Access to the path is denied.";
		public const string UnauthorizedAccess_IODenied_Path = "Access to the path '{0}' is denied.";
		public const string ArgumentOutOfRange_FileLengthTooBig = "Specified file length was too large for the file system.";
		public const string IO_FileExists_Name = "The file '{0}' already exists.";
		public const string IO_PathTooLong = "The specified file name or path is too long, or a component of the specified path is too long.";
		public const string Arg_NonZeroLowerBound = "The lower bound of target array must be zero.";
		public const string Arg_WrongType = "The value '{0}' is not of type '{1}' and cannot be used in this generic collection.";
		public const string Arg_ArrayPlusOffTooSmall = "Destination array is not long enough to copy all the items in the collection. Check array index and length.";
		public const string ArgumentOutOfRange_NeedNonNegNum = "Non-negative number required.";
		public const string ArgumentOutOfRange_SmallCapacity = "capacity was less than the current size.";
		public const string Argument_InvalidOffLen = "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.";
		public const string Argument_AddingDuplicate = "An item with the same key has already been added. Key: {0}";
		public const string InvalidOperation_EmptyQueue = "Queue empty.";
		public const string InvalidOperation_EnumOpCantHappen = "Enumeration has either not started or has already finished.";
		public const string InvalidOperation_EnumFailedVersion = "Collection was modified; enumeration operation may not execute.";
		public const string InvalidOperation_EmptyStack = "Stack empty.";
		public const string InvalidOperation_EnumNotStarted = "Enumeration has not started. Call MoveNext.";
		public const string InvalidOperation_EnumEnded = "Enumeration already finished.";
		public const string NotSupported_KeyCollectionSet = "Mutating a key collection derived from a dictionary is not allowed.";
		public const string NotSupported_ValueCollectionSet = "Mutating a value collection derived from a dictionary is not allowed.";
		public const string Arg_ArrayLengthsDiffer = "Array lengths must be the same.";
		public const string Arg_BitArrayTypeUnsupported = "Only supported array types for CopyTo on BitArrays are Boolean[], Int32[] and Byte[].";
		public const string Arg_HSCapacityOverflow = "HashSet capacity is too big.";
		public const string Arg_HTCapacityOverflow = "Hashtable's capacity overflowed and went negative. Check load factor, capacity and the current size of the table.";
		public const string Arg_InsufficientSpace = "Insufficient space in the target location to copy the information.";
		public const string Arg_RankMultiDimNotSupported = "Only single dimensional arrays are supported for the requested action.";
		public const string Argument_ArrayTooLarge = "The input array length must not exceed Int32.MaxValue / {0}. Otherwise BitArray.Length would exceed Int32.MaxValue.";
		public const string Argument_InvalidArrayType = "Target array type is not compatible with the type of items in the collection.";
		public const string ArgumentOutOfRange_BiggerThanCollection = "Must be less than or equal to the size of the collection.";
		public const string ArgumentOutOfRange_Index = "Index was out of range. Must be non-negative and less than the size of the collection.";
		public const string ExternalLinkedListNode = "The LinkedList node does not belong to current LinkedList.";
		public const string LinkedListEmpty = "The LinkedList is empty.";
		public const string LinkedListNodeIsAttached = "The LinkedList node already belongs to a LinkedList.";
		public const string NotSupported_SortedListNestedWrite = "This operation is not supported on SortedList nested types because they require modifying the original SortedList.";
		public const string SortedSet_LowerValueGreaterThanUpperValue = "Must be less than or equal to upperValue.";
		public const string Serialization_InvalidOnDeser = "OnDeserialization method was called while the object was not being deserialized.";
		public const string Serialization_MismatchedCount = "The serialized Count information doesn't match the number of items.";
		public const string Serialization_MissingKeys = "The keys for this dictionary are missing.";
		public const string Serialization_MissingValues = "The values for this dictionary are missing.";
		public const string ArgumentOutOfRange_IndexCountBuffer = "Index and count must refer to a location within the buffer.";
		public const string Argument_InvalidCharSequenceNoIndex = "String contains invalid Unicode code points.";
		public const string net_uri_BadAuthority = "Invalid URI: The Authority/Host could not be parsed.";
		public const string net_uri_BadAuthorityTerminator = "Invalid URI: The Authority/Host cannot end with a backslash character ('\\\\').";
		public const string net_uri_BadFormat = "Invalid URI: The format of the URI could not be determined.";
		public const string net_uri_NeedFreshParser = "The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.";
		public const string net_uri_AlreadyRegistered = "A URI scheme name '{0}' already has a registered custom parser.";
		public const string net_uri_BadHostName = "Invalid URI: The hostname could not be parsed.";
		public const string net_uri_BadPort = "Invalid URI: Invalid port specified.";
		public const string net_uri_BadScheme = "Invalid URI: The URI scheme is not valid.";
		public const string net_uri_BadString = "Invalid URI: There is an invalid sequence in the string.";
		public const string net_uri_BadUserPassword = "Invalid URI: The username:password construct is badly formed.";
		public const string net_uri_CannotCreateRelative = "A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.";
		public const string net_uri_SchemeLimit = "Invalid URI: The Uri scheme is too long.";
		public const string net_uri_EmptyUri = "Invalid URI: The URI is empty.";
		public const string net_uri_InvalidUriKind = "The value '{0}' passed for the UriKind parameter is invalid.";
		public const string net_uri_MustRootedPath = "Invalid URI: A Dos path must be rooted, for example, 'c:\\\\'.";
		public const string net_uri_NotAbsolute = "This operation is not supported for a relative URI.";
		public const string net_uri_PortOutOfRange = "A derived type '{0}' has reported an invalid value for the Uri port '{1}'.";
		public const string net_uri_SizeLimit = "Invalid URI: The Uri string is too long.";
		public const string net_uri_UserDrivenParsing = "A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.";
		public const string net_uri_NotJustSerialization = "UriComponents.SerializationInfoString must not be combined with other UriComponents.";
		public const string net_uri_BadUnicodeHostForIdn = "An invalid Unicode character by IDN standards was specified in the host.";
		public const string Argument_ExtraNotValid = "Extra portion of URI not valid.";
		public const string Argument_InvalidUriSubcomponent = "The subcomponent, {0}, of this uri is not valid.";
	}
}
